		Getting Started
		---------------

Boost for Debian is linked with the STLPort standard C++ libraries.
Your boost-using code must also use STLPort, so do not forget to add
/usr/include/stlport to the compiler's search path, and link against
the stlport library.  You can use commands similar to this one:

  g++ -I/usr/include/stlport foo.cc -lboost_thread -lstlport

There is extensive documentation available in the libboost-doc
package and at www.boost.org.


		Python 2.2
		----------

The default python version in Debian switched from 2.1 to 2.2 on
2002-08-24, and Boost.Python has followed suit.  The shared library
package was renamed, but the actual library name (and soname)
cannot be changed, so the new libboost-python1.28.0-python2.2
conflicts and replaces the old shared library package.  

Installing the new shared library is likely to break your code.
Presumably only a recompile will be needed.


		Examples Package
		----------------

Example code was previously available in a libboost-examples package.
These code examples are integrated with the documentation, so either
install the -doc package or visit boost.org to get them.



		STLPort and GCC 3
		-----------------

The Boost libraries depend on a conforming stdc++ library.  I tried
building boost using GCC 2.95.x (the default on most Debian
architectures as of this writing), and it fails some of the regression
tests.  However, using the same compiler plus STLPort suffices to pass
the regression tests.  Thus Boost is built using STLPort and the
packages depend on the STLPort packages.

See http://www.boost.org/status/cs-linux.html.

It is also true that GCC 3 passes the regression testing, so when
that is default everywhere I'll no longer build with stlport.

If you prefer to use Boost with GCC 3, you need to get the sources and
rebuild it yourself.  I'm afraid that requires hacking the following
files: debian/control, debian/rules, and tools/build/debian-tools.jam.

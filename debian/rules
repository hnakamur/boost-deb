#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# This file is public domain software, originally written by Joey Hess.
#
# This version is for a multibinary package. It also allows you to build any
# of the binary packages independantly, via binary-<package> targets.

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# This is the debhelper compatibility version to use.
export DH_COMPAT=3

# This has to be exported to make some magic below work.
export DH_OPTIONS


# Boost does not guarantee any ABI, so we use full version in SONAME version
SOVERSION=1.30.0

# Locations of static libs.
static_date_time = dbuild/libs/date_time/build/bin/libboost_date_time.a/gcc/release/runtime-link-dynamic/libboost_date_time.a
static_filesystem = dbuild/libs/filesystem/build/bin/libboost_filesystem.a/gcc/release/runtime-link-dynamic/libboost_filesystem.a
static_graph = libs/graph/src/libbgl-viz.a
static_regex = dbuild/libs/regex/build/bin-stage/libboost_regex.a
static_signals = dbuild/libs/signals/build/bin/libboost_signals.a/gcc/release/runtime-link-dynamic/libboost_signals.a
static_test1 = dbuild/libs/test/build/bin/libboost_prg_exec_monitor.a/gcc/release/runtime-link-dynamic/libboost_prg_exec_monitor.a
static_test2 = dbuild/libs/test/build/bin/libboost_test_exec_monitor.a/gcc/release/runtime-link-dynamic/libboost_test_exec_monitor.a
static_test3 = dbuild/libs/test/build/bin/libboost_unit_test_framework.a/gcc/release/runtime-link-dynamic/libboost_unit_test_framework.a


# locations of shared libs.
shared_date_time = dbuild/libs/date_time/build/bin/libboost_date_time.so/gcc/release/runtime-link-dynamic/shared-linkable-true/libboost_date_time.so.$(SOVERSION)
shared_graph = libs/graph/src/libbgl-viz.so.$(SOVERSION)
shared_python = dbuild/libs/python/build/bin-stage/libboost_python.so.$(SOVERSION)
shared_regex = dbuild/libs/regex/build/bin-stage/libboost_regex.so.$(SOVERSION)
shared_signals = dbuild/libs/signals/build/bin/libboost_signals.so/gcc/release/runtime-link-dynamic/shared-linkable-true/libboost_signals.so.$(SOVERSION)
shared_test1 = dbuild/libs/test/build/bin/libboost_prg_exec_monitor.so/gcc/release/runtime-link-dynamic/shared-linkable-true/libboost_prg_exec_monitor.so.$(SOVERSION)
shared_test2 = dbuild/libs/test/build/bin/libboost_test_exec_monitor.so/gcc/release/runtime-link-dynamic/shared-linkable-true/libboost_test_exec_monitor.so.$(SOVERSION)
shared_test3 = dbuild/libs/test/build/bin/libboost_unit_test_framework.so/gcc/release/runtime-link-dynamic/shared-linkable-true/libboost_unit_test_framework.so.$(SOVERSION)
shared_thread = dbuild/libs/thread/build/bin/libboost_thread.so/gcc/release/runtime-link-dynamic/shared-linkable-true/threading-multi/libboost_thread.so.$(SOVERSION)



htmldir = debian/libboost-doc/usr/share/doc/libboost-doc/HTML

bjam = tools/build/jam_src/bjam

JAM = $(bjam) -sTOOLS=gcc -sBUILD=release \
	-sBOOST_ROOT=. -sALL_LOCATE_TARGET=`pwd`/dbuild \
	-sPYTHON_VERSION=2.2 -sPYTHON_ROOT=/usr \
	-d2

$(bjam):
	cd tools/build/jam_src && sh build.sh gcc && mv bin.*/bjam .

build: build-stamp
build-stamp: $(bjam)
	dh_testdir

# This seems like a good idea, but it messed up when I tried it.
#	cd libs/config && ./configure
#	mv libs/config/user.hpp boost/config

# Build most of the stuff with jam
	$(JAM) 

# Build the graph library with upstream makefile
	$(MAKE) -C libs/graph/src libbgl-viz.a
	rm -f libs/graph/src/*.o 
	$(MAKE) -C libs/graph/src EXTRAFLAGS='-fPIC' GRAPH_SONAME_VERSION=$(SOVERSION) libbgl-viz.so

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp

	-$(JAM) clean
	rm -rf tools/build/jam_src/bootstrap.gcc
	rm -rf tools/build/jam_src/bin.*
	rm -f tools/build/jam_src/bjam
	rm -rf dbuild

	$(MAKE) -C libs/graph/src clean

# Do not need to track changes done to built files.
#	rm -f boost/config/user.hpp
	rm -f libs/config/config.{log,status}
#	rm -f libs/graph/src/graphviz_parser.tab.{c,h}

	dh_clean

install: DH_OPTIONS=
install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs --all usr/include usr/lib


	# package libboost-dev
	rm -rf   debian/libboost-dev/usr/include/boost
	cp -a boost debian/libboost-dev/usr/include/boost
	rm -f debian/libboost-dev/usr/include/boost/pool/detail/*.bat
	rm -f debian/libboost-dev/usr/include/boost/pool/detail/*.m4
	rm -f debian/libboost-dev/usr/include/boost/pool/detail/*.sh

	cp $(static_filesystem) debian/libboost-dev/usr/lib

	# package libboost-doc
	mkdir -p `dirname $(htmldir)`
	rm -rf dbuild/docs
# -q == no questions - quiet mode
# -Q == no log
# -C0 == no cache
	httrack --mirror -q -Q -C0 -O dbuild/docs --footer '' file://`pwd`/index.htm
	d=`find dbuild/docs -name google_logo_40wht.gif`; d=`dirname $$d`; \
	    mv $$d $(htmldir)

	# package libboost-date-time$(SOVERSION)
	cp $(shared_date_time) debian/libboost-date-time$(SOVERSION)/usr/lib

	# package libboost-date-time-dev
	mkdir -p debian/libboost-date-time-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/date_time \
	   debian/libboost-date-time-dev/usr/include/boost
	cp $(static_date_time) debian/libboost-date-time-dev/usr/lib
	ln -s libboost_date_time.so.$(SOVERSION) \
	   debian/libboost-date-time-dev/usr/lib/libboost_date_time.so

	# package libboost-graph$(SOVERSION)
	cp $(shared_graph) debian/libboost-graph$(SOVERSION)/usr/lib
	mkdir -p debian/libboost-graph$(SOVERSION)/usr/share/doc/libboost-graph$(SOVERSION)
	cp libs/graph/LICENSE debian/libboost-graph$(SOVERSION)/usr/share/doc/libboost-graph$(SOVERSION)

	# package libboost-graph-dev
	mkdir -p debian/libboost-graph-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/graph \
	   debian/libboost-graph-dev/usr/include/boost
	cp $(static_graph) debian/libboost-graph-dev/usr/lib
	ln -s libbgl-viz.so.$(SOVERSION) \
	   debian/libboost-graph-dev/usr/lib/libbgl-viz.so

	# package libboost-python$(SOVERSION)
	cp $(shared_python) debian/libboost-python$(SOVERSION)/usr/lib

	# package libboost-python-dev
	mkdir -p debian/libboost-python-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/python \
	   debian/libboost-python-dev/usr/include/boost
	ln -s libboost_python.so.$(SOVERSION) \
	   debian/libboost-python-dev/usr/lib/libboost_python.so

	# package libboost-regex$(SOVERSION)
	cp $(shared_regex) debian/libboost-regex$(SOVERSION)/usr/lib

	# package libboost-regex-dev
	mkdir -p debian/libboost-regex-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/*regex* \
	   debian/libboost-regex-dev/usr/include/boost
	cp $(static_regex) debian/libboost-regex-dev/usr/lib
	ln -s libboost_regex.so.$(SOVERSION) \
	   debian/libboost-regex-dev/usr/lib/libboost_regex.so

	# package libboost-signals$(SOVERSION)
	cp $(shared_signals) debian/libboost-signals$(SOVERSION)/usr/lib

	# package libboost-signals-dev
	mkdir -p debian/libboost-signals-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/*signal* \
	   debian/libboost-signals-dev/usr/include/boost
	cp $(static_signals) debian/libboost-signals-dev/usr/lib
	ln -s libboost_signals.so.$(SOVERSION) \
	   debian/libboost-signals-dev/usr/lib/libboost_signals.so

	# package libboost-test$(SOVERSION)
	cp $(shared_test1) debian/libboost-test$(SOVERSION)/usr/lib
	cp $(shared_test2) debian/libboost-test$(SOVERSION)/usr/lib
	cp $(shared_test3) debian/libboost-test$(SOVERSION)/usr/lib

	# package libboost-test-dev
	mkdir -p debian/libboost-test-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/test \
	   debian/libboost-test-dev/usr/include/boost
	cp $(static_test1) debian/libboost-test-dev/usr/lib
	cp $(static_test2) debian/libboost-test-dev/usr/lib
	cp $(static_test3) debian/libboost-test-dev/usr/lib
	ln -s libboost_prg_exec_monitor.so.$(SOVERSION) \
	   debian/libboost-test-dev/usr/lib/libboost_prg_exec_monitor.so
	ln -s libboost_test_exec_monitor.so.$(SOVERSION) \
	   debian/libboost-test-dev/usr/lib/libboost_test_exec_monitor.so
	ln -s libboost_unit_test_framework.so.$(SOVERSION) \
	   debian/libboost-test-dev/usr/lib/libboost_unit_test_framework.so

	# package libboost-thread$(SOVERSION)
	cp $(shared_thread) debian/libboost-thread$(SOVERSION)/usr/lib

	# package libboost-thread-dev
	mkdir -p debian/libboost-thread-dev/usr/include/boost
	mv debian/libboost-dev/usr/include/boost/thread* \
	   debian/libboost-thread-dev/usr/include/boost
	ln -s libboost_thread.so.$(SOVERSION) \
	   debian/libboost-thread-dev/usr/lib/libboost_thread.so


# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot
#	dh_installdebconf
	dh_installdocs --all debian/README.Debian
	dh_installexamples
	dh_installinfo
	dh_installchangelogs
	dh_strip
	dh_link
	dh_compress -Xlibboost-doc/HTML
	dh_fixperms
	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: build install
# (Uncomment this next line if you have such packages.)
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build install
	make -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary-common binary install
